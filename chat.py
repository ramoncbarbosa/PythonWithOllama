import os
import json
import uuid
import requests
from dotenv import load_dotenv

load_dotenv()

# Configura√ß√µes do Ollama
OLLAMA_URL = os.getenv("OLLAMA_URL", "http://localhost:11434/api/chat")
OLLAMA_MODEL = os.getenv("OLLAMA_MODEL", "llama3.1:8b")
TIMEOUT = int(os.getenv("TIMEOUT", 60))
MAX_TOKENS = int(os.getenv("MAX_TOKENS", 800))
TEMPERATURE = float(os.getenv("TEMPERATURE", 0.3))

# Categorias e Subcategorias
categories = {
    "vari√°veis": ["o_que_s√£o_vari√°veis", "tipos_existentes_de_vari√°veis", "vari√°veis_mut√°veis", "escopo_local_da_vari√°vel", "escopo_global_da_vari√°vel"],
    "listas": ["o_que_s√£o_listas", "adicionar_elemento_na_lista", "remover_elemento_da_lista", "ordenar_lista", "acessar_elemento_da_lista"],
    "condicionais": ["o_que_s√£o_condicionais", "condicional_simples", "condicional_composta", "condicional_aninhada"],
    "fun√ß√µes": ["o_que_s√£o_fun√ß√µes", "como_usar_fun√ß√µes", "tipos_de_fun√ß√µes"],
    "compara√ß√µes": ["compara√ß√£o_entre_valores", "maior_ou_menor", "compara√ß√£o_de_conte√∫do", "impacto_da_compara√ß√£o"],
    "textos_e_caracteres": ["o_que_s√£o_textos", "opera√ß√µes_de_concatenacao_de_textos", "o_que_s√£o_caracteres", "como_converter_caracteres"],
    "n√∫meros": ["o_que_s√£o_n√∫meros_inteiros", "o_que_s√£o_n√∫meros_decimais"],
    "operadores_matem√°ticos": ["operadores_matem√°ticos_b√°sicos"],
    "operadores_l√≥gicos": ["o_que_s√£o_operadores_l√≥gicos"],
}

# Gera√ß√£o do Prompt
def generate_prompt(subcategoria):
    return (
        f"Considere o t√≥pico '{subcategoria}'. "
        "Gere 5 perguntas de m√∫ltipla escolha sobre esse t√≥pico. "
        "Cada pergunta deve conter exatamente 5 op√ß√µes de resposta, variadas. "
        "Inclua um campo answer_keys como array, onde cada item √© a letra da resposta correta ('A', 'B', 'C', 'D' ou 'E'). "
        "Responda apenas com o JSON bruto, sem explica√ß√£o e sem usar markdown. N√£o escreva nada al√©m do JSON. "
        "Formato de resposta esperado: "
        '{{"questions": ['
        '{{"question": "Pergunta 1", "options": ["Op√ß√£o 1", "Op√ß√£o 2", "Op√ß√£o 3", "Op√ß√£o 4", "Op√ß√£o 5"]}},'
        '{{"question": "Pergunta 2", "options": ["Op√ß√£o 1", "Op√ß√£o 2", "Op√ß√£o 3", "Op√ß√£o 4", "Op√ß√£o 5"]}},'
        '{{"question": "Pergunta 3", "options": ["Op√ß√£o 1", "Op√ß√£o 2", "Op√ß√£o 3", "Op√ß√£o 4", "Op√ß√£o 5"]}},'
        '{{"question": "Pergunta 4", "options": ["Op√ß√£o 1", "Op√ß√£o 2", "Op√ß√£o 3", "Op√ß√£o 4", "Op√ß√£o 5"]}},'
        '{{"question": "Pergunta 5", "options": ["Op√ß√£o 1", "Op√ß√£o 2", "Op√ß√£o 3", "Op√ß√£o 4", "Op√ß√£o 5"]}}'
        '], "answer_keys": ["A", "B", "C", "D", "E"]}}'
    )


# Chamada √† API do Ollama
def call_ollama(prompt):
    payload = {
        "model": OLLAMA_MODEL,
        "messages": [{"role": "user", "content": prompt}],
        "options": {"temperature": TEMPERATURE, "num_predict": MAX_TOKENS},
        "stream": False
    }

    try:
        response = requests.post(OLLAMA_URL, json=payload, timeout=TIMEOUT)
        response.raise_for_status()
        return response.json()["message"]["content"]
    except Exception as e:
        print(f"‚ùå Erro na chamada √† API do Ollama: {e}")
        return None

# Gera√ß√£o dos quizzes completos
all_quizzes = []

for categoria, subcats in categories.items():
    for subcategoria in subcats:
        print(f"\nüìö Gerando quiz para: {categoria}/{subcategoria}")
        prompt = generate_prompt(subcategoria)
        raw_response = call_ollama(prompt)

        if raw_response is None:
            print("‚ö†Ô∏è Resposta vazia ou erro de conex√£o.")
            continue

        try:
            quiz = json.loads(raw_response)

            if "questions" in quiz and "answer_keys" in quiz:
                all_quizzes.append({
                    "group_id": str(uuid.uuid4()),
                    "category": categoria,
                    "subject": subcategoria,
                    "prompt": prompt,
                    "source": "ollama",
                    "questions": quiz["questions"],
                    "answer_keys": quiz["answer_keys"]
                })
            else:
                print("‚ö†Ô∏è Resposta inv√°lida, faltam campos esperados. Resposta parcial:")
                print(json.dumps(quiz, indent=2)[:1000])  # Limita a 1000 caracteres

        except json.JSONDecodeError as e:
            print(f"‚ö†Ô∏è Erro ao decodificar JSON: {e}")
            print("üìù Conte√∫do recebido:")
            print(raw_response[:1000])  # Limita o print

# Salvar o resultado
with open("quizzes.json", 'w', encoding='utf-8') as f:
    json.dump(all_quizzes, f, ensure_ascii=False, indent=4)

print("\n‚úÖ Quizzes salvos em quizzes.json")
